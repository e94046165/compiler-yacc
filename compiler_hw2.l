/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
%}

letter [a-zA-Z]
digit [0-9]
id {letter}+({letter}|{digit})*
int_digit ("-"?[1-9]+[0-9]*)|[0] 
float_digit "-"?{digit}+"."{digit}+
number {digit}+|{float_digit} 
ignore [\t\r\s]+|" "+
comment_start "\/\/"|"\/\*"
comment_end   "\*\/"

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { return '+';}
"-" 	{ return '-';}
"*" 	{ return '*';}
"/" 	{ return '/';}
"%"     { return '%';}
"++"    { return INC;}
"--"    { return DEC;}

 /* Relational */
">"		{ return L;}
"<"		{ return S;}
">="	{ return LE;}
"<="	{ return SE;}
"=="	{ return EE;}
"!="	{ return NE;}

 /* Assignment */
"="		{ return '=';}
"+="	{ return AA;}
"-="	{ return SA;}
"*="	{ return MA;}
"/="	{ return DA;}
"%="	{ return MOA;}

 /* Logical */
"&&"	{ }
"||"	{ }
"!"		{ }

 /* Delimiters */
"("		{ return '(';}
")"		{ return ')';}
"{"		{ }
"}"		{ }

 /* Print Keywords */	
"print"		{ return PT;}
"println"	{ }

 /* Condition and Loop Keywords */
"if"		{ }
"else"		{ }
"for"		{ }

 /* Declaration Keywords */
"var"		{return VAR; }
"void"		{dS(yytext);return VOID; }
"int"		{dS(yytext);return INT; }
"float32"	{dS(yytext);return FLOAT; }

 /* String Constant */
\"				        { BEGIN STRING_STATE;}
<STRING_STATE>\"		{ BEGIN INITIAL;}
<STRING_STATE>[^"]*		{ }

 /* Number Constant */
{int_digit}	{yylval.i_val = atoi(yytext); return I_CONST; }
{float_digit}	{yylval.f_val = atof(yytext);return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ }
<COMMENT>\n			{ }
<COMMENT>"*"		{ }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ }

 /* Variable ID */
 {id}       { dS(yytext);return ID;}

 /* others */

[\n]		{ return NEWLINE;}
[ \t]		{ } /* Ignore */
[^; \t] 	{ } /* Ignore other charactor sets */
<<EOF>>     { return EOF;}

%%

int yywrap()
{
    return 1;
}
void dS(char* string){//deliever string
	yylval.string= malloc(strlen(string)+1);
	strcpy(yylval.string , string);
}

